pipeline {
    agent any
    environment {
        SONAR_HOME = tool "Sonar"
    }
    stages {
        stage("Code") {
            steps {
                git url: "https://github.com/LondheShubham153/node-todo-cicd.git", branch: "master"
                echo "Code Cloned Successfully"
            }
        }
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv("Sonar") {
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=nodetodo -Dsonar.projectKey=nodetodo -X"
                }
            }
        }
        stage("SonarQube Quality Gates") {
            steps {
                timeout(time: 1, unit: "MINUTES") {
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage("OWASP") {
            steps {
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'OWASP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage("Build & Test") {
            steps {
                sh 'docker build -t node-app-batch-6:latest .'
                echo "Code Built Successfully"
            }
        }
        stage("Trivy") {
            steps {
                sh "trivy image node-app-batch-6"
            }
        }
        stage("Push to Private Docker Hub Repo") {
            steps {
                script {
                    withCredentials([string(credentialsId: 'DockerCreds', variable: 'dockerToken')]) {
                        sh "echo ${env.dockerToken} | docker login -u neamulkabiremon --password-stdin"
                        sh "docker tag node-app-batch-6:latest neamulkabiremon/node-app-batch-6:latest"
                        sh "docker push neamulkabiremon/node-app-batch-6:latest"
                    }
                }
            }
        }
        stage("Deploy") {
            steps {
                sh "docker-compose down && docker-compose up -d"
                echo "App Deployed Successfully"
            }
        }
    }
}
